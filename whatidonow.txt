
prep@305-PC11 MINGW64 /
$ git status
fatal: not a git repository (or any of the parent directories): .git

prep@305-PC11 MINGW64 /
$ git init
Initialized empty Git repository in D:/Mikhaltsova/Прил Ис/Git/.git/

prep@305-PC11 MINGW64 / (master)
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        LICENSE.txt
        ReleaseNotes.html
        bin/
        cmd/
        dev/
        etc/
        git-bash.exe
        git-cmd.exe
        mingw64/
        unins000.dat
        unins000.exe
        unins000.msg
        usr/

nothing added to commit but untracked files present (use "git add" to track)

prep@305-PC11 MINGW64 / (master)
$ git add *.java
fatal: pathspec '*.java' did not match any files

prep@305-PC11 MINGW64 / (master)
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        LICENSE.txt
        ReleaseNotes.html
        bin/
        cmd/
        dev/
        etc/
        git-bash.exe
        git-cmd.exe
        mingw64/
        unins000.dat
        unins000.exe
        unins000.msg
        usr/

nothing added to commit but untracked files present (use "git add" to track)

prep@305-PC11 MINGW64 / (master)
$ git add.*java
git: 'add.*java' is not a git command. See 'git --help'.

prep@305-PC11 MINGW64 / (master)
$ git --help
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.

prep@305-PC11 MINGW64 / (master)
$ git add *.java
fatal: pathspec '*.java' did not match any files

prep@305-PC11 MINGW64 / (master)
$ git add *.java

prep@305-PC11 MINGW64 / (master)
$ git commit -m 'first commit'
[master (root-commit) 0a1ea6d] first commit
 1 file changed, 17 insertions(+)
 create mode 100644 tema28 primer2.java

prep@305-PC11 MINGW64 / (master)
$ git add *.java

prep@305-PC11 MINGW64 / (master)
$ $ git commit -m 'first commit'
bash: $: command not found

prep@305-PC11 MINGW64 / (master)
$ git commit -m 'first commit'
[master a05f381] first commit
 3 files changed, 119 insertions(+)
 create mode 100644 MultiClient.java
 create mode 100644 MultiThreadServerMain.java
 create mode 100644 ServerThread.java

prep@305-PC11 MINGW64 / (master)
$ git commit -m 'first commit'
On branch master
Changes not staged for commit:
        modified:   MultiClient.java

Untracked files:
        LICENSE.txt
        ReleaseNotes.html
        bin/
        cmd/
        dev/
        etc/
        git-bash.exe
        git-cmd.exe
        mingw64/
        unins000.dat
        unins000.exe
        unins000.msg
        usr/

no changes added to commit

prep@305-PC11 MINGW64 / (master)
$ git commit -m 'first commit'
On branch master
Changes not staged for commit:
        modified:   MultiClient.java

Untracked files:
        LICENSE.txt
        ReleaseNotes.html
        bin/
        cmd/
        dev/
        etc/
        git-bash.exe
        git-cmd.exe
        mingw64/
        unins000.dat
        unins000.exe
        unins000.msg
        usr/

no changes added to commit

prep@305-PC11 MINGW64 / (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   MultiClient.java

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        LICENSE.txt
        ReleaseNotes.html
        bin/
        cmd/
        dev/
        etc/
        git-bash.exe
        git-cmd.exe
        mingw64/
        unins000.dat
        unins000.exe
        unins000.msg
        usr/
        whatidonow

no changes added to commit (use "git add" and/or "git commit -a")

prep@305-PC11 MINGW64 / (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   MultiClient.java

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        LICENSE.txt
        ReleaseNotes.html
        bin/
        cmd/
        dev/
        etc/
        git-bash.exe
        git-cmd.exe
        mingw64/
        unins000.dat
        unins000.exe
        unins000.msg
        usr/
        whatidonow

no changes added to commit (use "git add" and/or "git commit -a")

prep@305-PC11 MINGW64 / (master)
$ git ad
git: 'ad' is not a git command. See 'git --help'.

The most similar commands are
        add
        am

prep@305-PC11 MINGW64 / (master)
$ git add *.*
warning: LF will be replaced by CRLF in LICENSE.txt.
The file will have its original line endings in your working directory
warning: LF will be replaced by CRLF in ReleaseNotes.html.
The file will have its original line endings in your working directory

prep@305-PC11 MINGW64 / (master)
$ git add *.
fatal: pathspec '*.' did not match any files

prep@305-PC11 MINGW64 / (master)
$ git add *.txt

prep@305-PC11 MINGW64 / (master)
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   LICENSE.txt
        modified:   MultiClient.java
        new file:   ReleaseNotes.html
        new file:   git-bash.exe
        new file:   git-cmd.exe
        new file:   unins000.dat
        new file:   unins000.exe
        new file:   unins000.msg
        new file:   whatidonow.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        bin/
        cmd/
        dev/
        etc/
        mingw64/
        usr/


prep@305-PC11 MINGW64 / (master)
$ git status -s
A  LICENSE.txt
M  MultiClient.java
A  ReleaseNotes.html
A  git-bash.exe
A  git-cmd.exe
A  unins000.dat
A  unins000.exe
A  unins000.msg
A  whatidonow.txt
?? bin/
?? cmd/
?? dev/
?? etc/
?? mingw64/
?? usr/

prep@305-PC11 MINGW64 / (master)
$ git status --short
A  LICENSE.txt
M  MultiClient.java
A  ReleaseNotes.html
A  git-bash.exe
A  git-cmd.exe
A  unins000.dat
A  unins000.exe
A  unins000.msg
A  whatidonow.txt
?? bin/
?? cmd/
?? dev/
?? etc/
?? mingw64/
?? usr/

prep@305-PC11 MINGW64 / (master)
$ git log
commit a05f3813b36d4df00031d073adc8fb0d67cd78e2 (HEAD -> master)
Author: Olya19 <olya19@tut.by>
Date:   Mon Jul 1 21:13:41 2019 +0300

    first commit

commit 0a1ea6d18a6a6be62b95ca8f28dde5a0eefa2ef1
Author: Olya19 <olya19@tut.by>
Date:   Mon Jul 1 21:08:00 2019 +0300

    first commit

prep@305-PC11 MINGW64 / (master)
$ git checkout
A       LICENSE.txt
M       MultiClient.java
A       ReleaseNotes.html
A       git-bash.exe
A       git-cmd.exe
A       unins000.dat
A       unins000.exe
A       unins000.msg
A       whatidonow.txt

prep@305-PC11 MINGW64 / (master)
$ git clone D:\Mikhaltsova\Прил Ис\Git2
Cloning into 'ИсGit2'...
fatal: 'D:MikhaltsovaПрил' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

prep@305-PC11 MINGW64 / (master)
$ ^C

prep@305-PC11 MINGW64 / (master)
$  git clone D:\Mikhaltsova\Прил Ис\Git2
Cloning into 'ИсGit2'...
fatal: 'D:MikhaltsovaПрил' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

prep@305-PC11 MINGW64 / (master)
$
